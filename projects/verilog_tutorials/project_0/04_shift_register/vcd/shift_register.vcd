$date
	Mon Jul  8 09:53:16 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module shift_register_tb $end
$var wire 8 ! q [7:0] $end
$var reg 1 " Sin $end
$var reg 1 # clk $end
$var reg 8 $ d [7:0] $end
$var reg 1 % load $end
$var reg 256 & taskState [255:0] $end
$var reg 256 ' vcd_file [255:0] $end
$var integer 32 ( i [31:0] $end
$scope module u_shift_register $end
$var wire 1 " Sin $end
$var wire 1 # clk $end
$var wire 8 ) d [7:0] $end
$var wire 1 % load $end
$var wire 8 * q [7:0] $end
$scope begin shift_register_block[1] $end
$scope module u_mux_dff $end
$var wire 1 # clk $end
$var wire 1 + in0 $end
$var wire 1 , in1 $end
$var wire 1 % load $end
$var reg 1 - mux_out $end
$var reg 1 . q $end
$upscope $end
$upscope $end
$scope begin shift_register_block[2] $end
$scope module u_mux_dff $end
$var wire 1 # clk $end
$var wire 1 / in0 $end
$var wire 1 0 in1 $end
$var wire 1 % load $end
$var reg 1 1 mux_out $end
$var reg 1 2 q $end
$upscope $end
$upscope $end
$scope begin shift_register_block[3] $end
$scope module u_mux_dff $end
$var wire 1 # clk $end
$var wire 1 3 in0 $end
$var wire 1 4 in1 $end
$var wire 1 % load $end
$var reg 1 5 mux_out $end
$var reg 1 6 q $end
$upscope $end
$upscope $end
$scope begin shift_register_block[4] $end
$scope module u_mux_dff $end
$var wire 1 # clk $end
$var wire 1 7 in0 $end
$var wire 1 8 in1 $end
$var wire 1 % load $end
$var reg 1 9 mux_out $end
$var reg 1 : q $end
$upscope $end
$upscope $end
$scope begin shift_register_block[5] $end
$scope module u_mux_dff $end
$var wire 1 # clk $end
$var wire 1 ; in0 $end
$var wire 1 < in1 $end
$var wire 1 % load $end
$var reg 1 = mux_out $end
$var reg 1 > q $end
$upscope $end
$upscope $end
$scope begin shift_register_block[6] $end
$scope module u_mux_dff $end
$var wire 1 # clk $end
$var wire 1 ? in0 $end
$var wire 1 @ in1 $end
$var wire 1 % load $end
$var reg 1 A mux_out $end
$var reg 1 B q $end
$upscope $end
$upscope $end
$scope begin shift_register_block[7] $end
$scope module u_mux_dff $end
$var wire 1 # clk $end
$var wire 1 C in0 $end
$var wire 1 D in1 $end
$var wire 1 % load $end
$var reg 1 E mux_out $end
$var reg 1 F q $end
$upscope $end
$upscope $end
$scope module u_mux_dff $end
$var wire 1 # clk $end
$var wire 1 " in0 $end
$var wire 1 G in1 $end
$var wire 1 % load $end
$var reg 1 H mux_out $end
$var reg 1 I q $end
$upscope $end
$upscope $end
$scope task init $end
$upscope $end
$scope task loadcycle $end
$var reg 10 J n [9:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1010 J
xI
0H
0G
xF
0E
0D
xC
xB
0A
0@
x?
x>
1=
1<
x;
x:
09
08
x7
x6
05
04
x3
x2
11
10
x/
x.
0-
0,
x+
bx *
b100100 )
bx (
b1011100010111101110110011000110110010000101111011100110110100001101001011001100111010001011111011100100110010101100111011010010111001101110100011001010111001000101110011101100110001101100100 '
b111001001100101011001110110100101110011011101000110010101110010 &
1%
b100100 $
0#
0"
bx !
$end
#5000
0/
13
07
0;
1?
0C
0+
0.
12
06
0:
1>
0B
0F
b100100 !
b100100 *
0I
1#
#10000
00
14
0<
1G
01
15
0=
1A
1H
0#
b1001 $
b1001 )
1"
b0 (
b111001101101000011010010110011001110100001000000111001001100101011001110110100101110011011101000110010101110010 &
0%
#15000
1-
1E
0A
19
05
1+
1C
0?
17
03
1I
1B
0>
16
b1001001 !
b1001001 *
02
1#
#20000
10
0#
b1101 $
b1101 )
b1 (
#25000
11
09
1=
0E
1/
07
1;
0C
1.
06
1:
0B
b10010011 !
b10010011 *
1F
1#
#30000
04
1<
1@
0#
b1100101 $
b1100101 )
b10 (
#35000
1A
0=
15
1?
0;
13
0F
1>
0:
b100111 !
b100111 *
12
1#
#40000
00
0<
0@
0H
0#
b1 $
b1 )
0"
b11 (
#45000
19
0A
1E
0-
17
0?
1C
0+
16
0>
1B
b1001110 !
b1001110 *
0I
1#
#50000
1,
10
18
1<
1@
0G
1H
0#
b1110110 $
b1110110 )
1"
b100 (
#55000
1-
0E
1=
01
1+
0C
1;
0/
1I
1F
0B
1:
b10011101 !
b10011101 *
0.
1#
#60000
0,
14
08
1D
1G
0#
b11101101 $
b11101101 )
b101 (
#65000
11
05
1A
1/
03
1?
1.
02
1>
b111011 !
b111011 *
0F
1#
#70000
00
18
0H
0#
b11111001 $
b11111001 )
0"
b110 (
#75000
0-
1E
09
15
0+
1C
07
13
0I
1B
06
b1110110 !
b1110110 *
12
1#
#80000
10
04
08
0<
0#
b11000101 $
b11000101 )
b111 (
#85000
01
19
0=
0/
17
0;
0.
16
0:
b11101100 !
b11101100 *
1F
1#
#90000
1<
0#
b11100101 $
b11100101 )
b1000 (
#95000
0A
1=
05
0?
1;
03
0>
1:
b11011000 !
b11011000 *
02
1#
#100000
1,
00
18
0<
0@
0D
0G
1H
0#
b10010 $
b10010 )
1"
b1001 (
#105000
09
1A
0E
1-
07
1?
0C
1+
06
1>
0B
b10110001 !
b10110001 *
1I
1#
#110000
0#
b1010 (
